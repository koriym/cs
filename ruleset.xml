<?xml version="1.0"?>
<ruleset name="BEAR">
	<!-- The name attribute of the ruleset tag is displayed when running PHP_CodeSniffer 
		with the -v command line argument. The description tag below is not displayed 
		anywhere except in this file, so it can contain information for developers 
		who may change this file in the future. -->
	<description>BEAR coding standard</description>
	<!-- You can hard-code ignore patterns directly into your custom standard 
		so you don't have to specify the patterns on the command line. -->
	<exclude-pattern>*/tests/*</exclude-pattern>
	<exclude-pattern>*/data/*</exclude-pattern>
	<exclude-pattern>*/doc/*</exclude-pattern>

	<!-- Include all sniffs in the Squiz standard except one. Note that the 
		name of the sniff being excluded is the code that the sniff is given by PHP_CodeSniffer 
		and is based on the file name and path of the sniff class. You can display 
		these codes using the -s command line argument when checking a file. -->
	<!-- <rule ref="Squiz"> <exclude name="Squiz.PHP.CommentedOutCode"/> </rule> -->
	<!-- Include some specific sniffs from the Generic standard. Note again 
		that the name of the sniff is the code that PHP_CodeSniffer gives it. -->

	<!-- Include some additional sniffs from the Generic standard -->
	<rule ref="Generic.Functions.FunctionCallArgumentSpacing"/>
	<rule ref="Generic.NamingConventions.UpperCaseConstantName">
		<exclude
			name="Generic.NamingConventions.UpperCaseConstantName.ConstantNotUpperCase"/><!-- 
			For PHP5.4 (trait) -->
	</rule>
	<rule ref="Generic.PHP.LowerCaseConstant"/>
	<rule ref="Generic.PHP.DisallowShortOpenTag"/>
	<rule ref="Generic.WhiteSpace.DisallowTabIndent"/>
	
	<!-- Lines can be 120 chars long, but never show errors -->
	<rule ref="Generic.Files.LineLength">
		<properties>
			<property name="lineLimit" value="120"/>
			<property name="absoluteLineLimit" value="0"/>
		</properties>
	</rule>

	<!-- Squiz -->
	<rule ref="Generic.WhiteSpace.ScopeIndent.Incorrect"/>
	<rule ref="Squiz.Commenting.FunctionComment">
		<rule ref="Squiz.Commenting.FunctionComment.MissingParamTag"/>
		<rule ref="Squiz.Commenting.FunctionComment.SeeIndent"/>
		<rule ref="Squiz.Commenting.FunctionComment.EmptyThrows"/>
		<rule ref="Squiz.Commenting.FunctionComment.MissingParamTag"/>
		<rule
			ref="Squiz.Functions.FunctionDeclarationArgumentSpacing.SpaceAfterDefault"/>
		<exclude name="Squiz.Commenting.FunctionComment.ShortFullStop"/>
	</rule>
	<rule ref="Zend.Debug.CodeAnalyzer"/>


	<!-- Use Unix newlines -->
	<rule ref="Generic.Files.LineEndings">
		<properties>
			<property name="eolChar" value="\n"/>
		</properties>
	</rule>
	<!-- Use warnings for inline control structures -->
	<rule ref="Generic.ControlStructures.InlineControlStructure">
		<properties>
			<property name="error" value="false"/>
		</properties>
	</rule>

	<!-- Zend -->
	<rule ref="PEAR.ControlStructures.ControlSignature"/>
	<rule ref="PEAR.Functions.FunctionCallSignature"/>
	<rule ref="PEAR.Functions.ValidDefaultValue"/>
	<rule ref="Squiz.Functions.GlobalFunction">
		<exclude name="Squiz.Functions.GlobalFunction.Found"/>
	</rule>

</ruleset>